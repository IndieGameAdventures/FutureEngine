/*
 *  Copyright 2013 by Lucas Stufflebeam mailto:info@indiegameadventures.com
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

#ifndef FUTURE_CORE_RESOURCE_RESOURCE_H
#define FUTURE_CORE_RESOURCE_RESOURCE_H

#include <future/core/type/type.h>
#include <future/core/object/managedobject.h>

// Forward Declares
class IFutureInputStream;
class IFutureOutputStream;

// If we are compiling a library then we won't have access to the global resource list so create a set of enums so we don't have compiler errors
#if defined(FUTURE_LIBRARY)

//! Enum containing a list of all resources that can be loaded. Actual enum is generated by Resource Manager tool
typedef enum ResourceID
{
    ResourceID_SystemResource = 0,
    
    ResourceID_Max,
    ResourceID_Null = -1,
} ResourceID;

//! Enum containing a list of all resources group that can be loaded. Actual enum is generated by Resource Manager tool
typedef enum ResourceGroupID
{
    ResourceGroupID_SystemResources = 0,

    ResourceGroupID_Max,
    ResourceGroupID_Null = -1,
} ResourceGroupID;

//! Enum containing a list of all strings that can be used. Actual enum is generated by Resource Manager tool
typedef enum StringID
{
    StringID_Max,
    StringID_Null = -1,
} StringID;

//! Enum containing a list of all valued that can be used. Actual enum is generated by Resource Manager tool
typedef enum ValueID
{
    ValueID_Max,
    ValueID_Null = -1,
} ValueID;

//! Enum containing a list of all value types that can be used. Actual enum is generated by Resource Manager tool
typedef enum ValueType
{
    ValueType_Bool,
    ValueType_U8,
    ValueType_U16,
    ValueType_U32,
    ValueType_S8,
    ValueType_S16,
    ValueType_S32,
    ValueType_F32,
    ValueType_Array,

    ValueType_Max,
    ValueType_Null = -1,
} ValueType;

//! Enum containing a list of all supported languages. Actual enum is generated by Resource Manager tool
typedef enum Language
{
    Language_Default,

    Language_Max,
    Language_Null = -1,
} Language;

#else
#   include <autogen/languages.h>
#   include <autogen/resources.h>
#   include <autogen/strings.h>
#   include <autogen/values.h>
#endif


/*!
 *  \brief      Base class for all game resources
 *
 *  \details    This is a resource. Resources are used to load data from files, whether local or network files. The
 *              Resource base is pretty simple. It keeps track of a few basic details about it's existance and passes
 *              all important functions (Load, Unload, Dump) to it's subclass. Resources must not be loaded on thier own.
 *              This will break lots of things. Resources must be added to to global resource list then loaded using the 
 *              ResourceManager. 
 *  
 *  \author     Lucas Stufflebeam
 *  \version    1.0
 *  \date       August 2013
 */
class FutureResource : public FutureThreadSafeObject
{
public:

    //! Returns the ResourceID assigned to this resource
    ResourceID	        Id() const
    { return m_id; }

    //! Determines if this resource is part od the specified group or not.
    bool				IsInGroup(ResourceGroupID group) const;

    //! True is the resource is loaded and in it's original state. False if the resource is not loaded or has been changed
    bool		        IsValid() const
    { return m_valid; }
    //! True if the resource is currently being loaded
    bool                IsLoading() const
    { return m_loading; }
    //! True if the resource is currently fully loaded and able to be used
    bool                IsLoaded() const
    { return m_loaded; }

    //! Sets m_valid to false, indicating that some value of the resource has changed since it was loaded.
    virtual void        Invalidate()
    { m_valid = false; }

    //! Adds a reference counter to this resource, a counter is added each time the resource is requested from the resource manager
    void                AddRef();
    //! Removes a reference counter from this resource. If all references are released, this resource will be unloaded as soon as possible
    void                Release();
	
protected:
	friend class FutureResourceManager;

    //! FutureResource Constructor.
    FutureResource();
    //! FutureResource Destructor. 
    virtual ~FutureResource();

    //! Adds a group reference indicating that this resource is part of a group that is loaded or being loaded
    void                AddGroupRef();
    //! Removes a group reference when a group is unloaded.
    void                GroupRelease();

    //! Returns true if the resource is no longer needed by any outside references or by any groups
    virtual bool        ShouldUnload();

    //! Loads the resource in from the provided stream.
	virtual bool		Load(ResourceID id, IFutureInputStream * stream);
    //! Unloads the resource, all internal resources, buffers, and memory will be freed
    virtual bool        Unload();

    //! Takes the data from this resource and writes it out to the stream so it can be read back by Load at a later time
    virtual bool        Dump(IFutureOutputStream * stream);

	ResourceID          m_id;           //! The ID assigned to this resource

    u32					m_numGroups;    //! The number of groups this resource belongs to
    ResourceGroupID *	m_groups;       //! An array of groups this resource belongs to
    
    bool				m_valid;        //! True if this resource is loaded and has not been changed
    bool                m_loading;      //! True if this resource is currently in the process of being loaded
    bool                m_loaded;       //! True if this resource is completely loaded and able to be used

    s32                 m_refs;         //! The number of active references to this resource
    s32                 m_groupRefs;    //! The number of active group references to this resource
};

#endif